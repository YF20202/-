'''
@author: Yifan Zhu
@e-mail: mayz0571@qq.com
'''
import json
import pandas as pd
import csv
import networkx as nx
import math
import numpy as np
import re
from haversine import haversine
from pandas.io.json import json_normalize

def remove_one_node():
    df=pd.read_csv('data/2015 old edges and distance.csv')
    G = nx.Graph()
    for index, row in df.iterrows():
        G.add_edge(row['port1'], row['port2'],weight=row['GC'])
    print(G.number_of_nodes())
    print(G.number_of_edges())
    nodeefficiency(G)
    for u in G.nodes:
        G0 = G.copy()
        G0.remove_node(u)
        nodeefficiency(G0,u)

def nodeefficiency(G,remove_node='None'):
    for u in G.nodes():  # 遍历图F的每个点
        path = nx.shortest_path_length(G, source=u)  # 图论最短路径
        path_weight = nx.shortest_path_length(G, source=u, weight='weight')  # 加上真实海运距离的最短路径
        data = pd.DataFrame([path]).T
        data['source'] = u
        data = data.reset_index().rename(columns={'index': 'target'})
        print(data)
        data.to_csv('expected output/results/2015 efficiency of each ports (remove '+remove_node+').csv',header=None,mode='a+', encoding='utf_8_sig',index=False)
        data = pd.DataFrame([path_weight]).T
        data['source'] = u
        data = data.reset_index().rename(columns={'index': 'target'})
        print(data)
        data.to_csv('expected output/results/2015 weight efficiency of each ports (remove ' + remove_node + ').csv',
                    header=None, mode='a+', encoding='utf_8_sig', index=False)

def influence():
    df = pd.read_excel('data/All routes_2015.xlsx', sheet_name='1622')
    G = nx.Graph()
    for index, row in df.iterrows():
        rotation = row['Rotation'].split(',')
        for port in rotation:
            for port2 in rotation:
                if (port != port2):
                    G.add_edge(port, port2)
    print(G.number_of_edges())

    nodes = [{'name': 'port'}]
    links = []
    for u in G.nodes():
        dic = {}
        dic['name'] = 'delete ' + u
        nodes.append(dic)
        dic = {}
        dic['name'] =  u
        nodes.append(dic)

    lij = pd.read_csv('data/2015 all port distance.csv', encoding='utf_8_sig',header=0,names=['target', 'country1', 'ISO3_1','lan1', 'lng1', 'source', 'country2', 'ISO3_2','lan2', 'lng2', 'GC'])
    df = pd.read_csv('expected output/results/2015 weight efficiency of each ports (remove None).csv', encoding='gbk',
                     names=['target', 'stp', 'source'])
    df = df[df['stp'] != 0]
    df=pd.merge(df,lij,how='left',on=['source','target'])
    df['initial'] = df['GC'] / df['stp']
    print(df)
    for u in G.nodes():
        df1=df[df['source']!=u]
        df1 = df1.groupby(by='target', as_index=False)['initial'].sum()
        res = pd.read_csv('expected output/results/2015 weight efficiency of each ports (remove '+u+').csv', encoding='gbk',names=['target','stp','source'])
        res = res[res['stp'] != 0]
        res = pd.merge(res, lij, how='left', on=['source', 'target'])
        res['remove ' + u] = res['GC'] / res['stp']
        res = res.groupby(by='target', as_index=False)['remove ' + u].sum()
        res=pd.merge(df1,res,on='target',how='left')
        res = res.fillna(0)
        res['value']=(res['initial']-res['remove ' + u])/res['initial']
        res['source']='delete '+u
        res=res[(res['value']!=0)&(res['target']!=u)]
        if(len(res)!=0):
            res.drop(columns=['remove '+u,'initial'],inplace=True)
            dic = res.to_dict(orient='records')
            links=links+dic
            res.to_csv('expected output/results/Figure6_7/weight influence of port and port.csv',mode='a+',header=0,index=False)

def criticality():
    df=pd.read_csv('expected output/results/Figure6_7/weight influence of port and port.csv',names=['source','value','target'])
    df=df.groupby(by='target',as_index=False)
    #df = df.groupby(by='source', as_index=False)    #vulnerability
    df.to_csv('expected output/results/2015 old ports centrality.csv')

def start_up():
    remove_one_node()
    influence()
    criticality()










